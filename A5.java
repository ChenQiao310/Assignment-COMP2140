import java.io.*;
import java.util.ArrayList;

public class A5 {

static int pointer = -1;	
static ArrayList tokens = new ArrayList();

public A5() {
	super();
}

public static void main(String[] args) throws Exception {
	//construct the token array
	BufferedWriter bw=new BufferedWriter(new FileWriter("a5.output"));
	A5Scanner scanner = new A5Scanner(new FileInputStream(new File("A5.tiny")));
	// note that yylex() is the default method to get the next token in scanner that is generated by JLlex.
	Symbol token; 
	while ((token=scanner.yylex()).sym!= A5Sym.EOF) {
		tokens.add(token);
	}
	tokens.add(token);   // add EOF as the last token in the array
	boolean legal= program() && nextToken().sym==A5Sym.EOF;
	bw.write((legal)?"legal":"illegal");
    bw.close();
}

static Symbol nextToken() {
	if (pointer < tokens.size()-1) {
		pointer++;
		Symbol token = (Symbol) tokens.get(pointer);
		System.out.println ("next Token: " + token.toString());
		return token;
	} else
		return null;
}

/** program --> methodDecl program
    program --> methodDecl
*/
static boolean program() throws Exception{
	int savePointer = pointer;
	if(methodDecl() && program())
		return true;

	pointer = savePointer;
	if(methodDecl())
		return true;

	pointer = savePointer;
	return false;
}

/** methodDecl --> type [MAIN] ID ( FormalParams ) Block
*/
static boolean methodDecl() throws Exception{
	int savePointer = pointer;
	if(type() && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID &&
		nextToken().sym == A5Sym.LPAREN && nonEmptyFormalParams() && nextToken().sym == A5Sym.RPAREN &&
		block())
		return true;

	pointer = savePointer;
	if(type() && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID &&
		nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.RPAREN &&
		block())
		return true;

	pointer = savePointer;
	if(type() && nextToken().sym == A5Sym.ID &&
		nextToken().sym == A5Sym.LPAREN && nonEmptyFormalParams() && nextToken().sym == A5Sym.RPAREN &&
		block())
		return true;

	pointer = savePointer;
	if(type() && nextToken().sym == A5Sym.ID &&
		nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.RPAREN &&
		block())
		return true;

	pointer = savePointer;
	return false;
}

/**  nonEmptyFormalParams --> formalParam COMMA nonEmptyFormalParams
     nonEmptyFormalParams --> formalParam
*/
static boolean nonEmptyFormalParams() throws Exception{
	int savePointer = pointer;
	if(formalParam() && nextToken().sym == A5Sym.COMMA && nonEmptyFormalParams())
		return true;

	pointer = savePointer;
	if(formalParam())
		return true;

	pointer = savePointer;
	return false;
}

/** methodDecl --> type ID
*/
static boolean formalParam() throws Exception{
	int savePointer = pointer;
	if(type() && nextToken().sym == A5Sym.ID)
		return true;

	pointer = savePointer;
	return false;
}

/** block --> BEGIN Statements END
*/
static boolean block() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.BEGIN && statements() && nextToken().sym == A5Sym.END)
		return true;
	

	pointer = savePointer;
	return false;
}

/** statements --> statement statements
    statements --> statement
*/
static boolean statements() throws Exception{
	int savePointer = pointer;
	if(statement() && statements())
		return true;

	pointer = savePointer;
	if(statement())
		return true;
	

	pointer = savePointer;
	return false;
}

/** statement --> block
    statement --> localVarDecl  
    statement --> assignStmt   
    statement --> returnStmt
    statement --> ifStmt
	statement --> writeStmt
	statement --> readStmt
*/
static boolean statement() throws Exception{
	int savePointer = pointer;
	if(block())
		return true;

	pointer = savePointer;
	if(localVarDecl())
		return true;

	pointer = savePointer;
	if(assignStmt())
		return  true;

	pointer = savePointer;
	if(returnStmt())
		return  true;

	pointer = savePointer;
	if(ifStmt())
		return  true;

	pointer = savePointer;
	if(writeStmt())
		return  true;

	pointer = savePointer;
	if(readStmt())
		return  true;
	

	pointer = savePointer;
	return false;
} 

/** localVarDecl -> type AssignStmt
    localVarDecl -> type ID ;
*/
static boolean localVarDecl() throws Exception{
	int savePointer = pointer;
	if(type() && assignStmt())
		return true;

	pointer = savePointer;
	if(type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	return false;
}

/** type --> INT
    type --> REAL
    type --> STRING
*/
static boolean type() throws Exception{
	int savePointer=pointer;
	int sym=nextToken().sym;
	if (sym == A5Sym.INT || sym == A5Sym.REAL || sym == A5Sym.STRING) 
		return true;

	pointer = savePointer;
	return false;
}

/** assignStmt --> ID := expression ;
    assignStmt --> ID := Qstring ;
*/
static boolean assignStmt() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.ASSIGN 
		&& expression() && nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.ASSIGN 
		&& nextToken().sym == A5Sym.Qstring && nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	return false;
}

/** returnStmt--> RETURN expression ;
*/
static boolean returnStmt() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.RETURN && expression() && nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	return false;
} 

/** ifStmt --> IF ( boolExpression ) statement ELSE statement
    ifStmt --> IF ( boolExpression ) statement    
*/
static boolean ifStmt() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpr() && 
		nextToken().sym == A5Sym.RPAREN && statement() && nextToken().sym == A5Sym.ELSE && statement())
		return true; 

	pointer = savePointer;
	if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpr() && 
		nextToken().sym == A5Sym.RPAREN && statement()) 
		return true;

	pointer = savePointer;
	return false;
}

/** writeStmt --> WRITE ( expression , Qstring ) ;
*/
static boolean writeStmt() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.WRITE && nextToken().sym == A5Sym.LPAREN && expression() &&
		nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.Qstring && nextToken().sym == A5Sym.RPAREN &&
		nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	return false;
}

/** readStmt --> READ ( ID , Qstring ) ;
*/
static boolean readStmt() throws Exception{
	int savePointer = pointer;
	if(nextToken().sym == A5Sym.READ && nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.ID &&
		nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.Qstring && nextToken().sym == A5Sym.RPAREN &&
		nextToken().sym == A5Sym.SEMI)
		return true;

	pointer = savePointer;
	return false;
}

/** expression--> multiplicativeExpr + expression
    expression--> multiplicativeExpr - expression
	expression--> multiplicativeExpr
*/
static boolean expression() throws Exception{
	int savePointer = pointer;
	if(multiplicativeExpr() && nextToken().sym == A5Sym.PLUS && expression())
		return true;

	pointer = savePointer;
	if(multiplicativeExpr() && nextToken().sym == A5Sym.MINUS && expression())
		return true;

	pointer = savePointer;
	if(multiplicativeExpr())
		return true;
	
	pointer = savePointer;
	return false;
}

/** multiplicativeExpr --> primaryExpr * multiplicativeExpr
    multiplicativeExpr --> primaryExpr / multiplicativeExpr
	multiplicativeExpr --> factor
	*/
static boolean multiplicativeExpr() throws Exception{
	int savePointer = pointer;
	if (primaryExpr() && nextToken().sym == A5Sym.MULTI && multiplicativeExpr())
		return true;
	
	pointer = savePointer;
	if (primaryExpr() && nextToken().sym == A5Sym.DIVIDE && multiplicativeExpr())
		return true;

	pointer = savePointer;
	if(primaryExpr())
		return true;

	pointer = savePointer;
	return false;
}

/** primaryExpr --> ID | NUMBER | (Expr) | ID() | ID(nonEmptyActualParams)
*/
static boolean primaryExpr() throws Exception{
	int savePointer = pointer;
	if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN && 
		nonEmptyActualParams() && nextToken().sym==A5Sym.RPAREN) 
		return true;
	
	pointer = savePointer;
	if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN &&
		nextToken().sym==A5Sym.RPAREN)
		return true;

	pointer=savePointer;
	int sym=nextToken().sym;
	if (sym == A5Sym.ID || sym == A5Sym.NUMBER) 
		return true;
	
	pointer = savePointer;
	if (nextToken().sym==A5Sym.LPAREN && expression() && nextToken().sym==A5Sym.RPAREN) 
		return true;

	pointer = savePointer;
	return false;
}

/** boolExpr --> expression == expression
    boolExpr --> expression != expression
    boolExpr --> TRUE
    boolExpr --> FALSE
*/
static boolean boolExpr() throws Exception{
	int savePointer = pointer;
	if(expression() && nextToken().sym==A5Sym.EQUAL && expression())
		return true;
	
	pointer=savePointer;
	if(expression() && nextToken().sym==A5Sym.NOTEQ && expression())
		return true;
	
	pointer=savePointer;
	int sym=nextToken().sym;
	if (sym == A5Sym.TRUE || sym == A5Sym.FALSE) 
		return true;

	pointer = savePointer;
	return false;
}


/** nonEmptyActualParams --> expression, nonEmptyActualParams
    nonEmptyActualParams --> expression 
*/
static boolean nonEmptyActualParams() throws Exception{
	int savePointer = pointer;
	if(expression() && nextToken().sym==A5Sym.COMMA && nonEmptyActualParams())
		return true;

	pointer=savePointer;
	if(expression())
		return true;

	pointer=savePointer;
	return false;
}



}